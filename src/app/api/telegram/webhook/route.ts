import { NextRequest, NextResponse } from "next/server";
import { initializeBot, getBotInstance } from "@/bot/bot";

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!TELEGRAM_BOT_TOKEN) {
  throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
let botInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    }),
  });

  return response.json();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
export async function POST(request: NextRequest) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏
    if (!botInitialized && TELEGRAM_BOT_TOKEN) {
      initializeBot(TELEGRAM_BOT_TOKEN);
      botInitialized = true;
    }

    const body = await request.json();

    console.log("Telegram webhook:", JSON.stringify(body, null, 2));

    if (body.message) {
      const message = body.message;
      const chatId = message.chat.id;
      const text = message.text;
      const user = message.from;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
      if (text === "/start") {
        const welcomeMessage =
          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏–Ω–∞ (¬¥ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°`) ‚ô°\n\n–Ø –¥–∏–¥–∂–∏—Ç–∞–ª —Ö—É–¥–æ–∂–Ω–∏—Ü–∞, —Ä–∏—Å—É—é—â–∞—è –≤ –æ–∫–æ–ª–æ-—Ä–µ–∞–ª–∏–∑–º–µ —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç. –†–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–º —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —É–≥–æ–ª–∫–µ. üíì\n\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:";

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üé® –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                web_app: {
                  url:
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://your-project.vercel.app",
                },
              },
            ],
            [
              {
                text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                web_app: {
                  url: `${
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://your-project.vercel.app"
                  }/order`,
                },
              },
            ],
          ],
        };

        await sendMessage(chatId, welcomeMessage, keyboard);
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
      else if (text === "/admin") {
        const bot = getBotInstance();
        if (bot) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
          const userId = user?.id;
          if (userId) {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const adminMessage = {
              chat: { id: chatId },
              from: { id: userId },
              text: "/admin",
            };

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await sendMessage(chatId, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin...");
          }
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
      else if (text === "/help") {
        const helpMessage =
          "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –°–ø—Ä–∞–≤–∫–∞\n/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:";

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å",
                web_app: {
                  url: `${
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://weinert-bot.vercel.app"
                  }/order`,
                },
              },
            ],
          ],
        };

        await sendMessage(chatId, helpMessage, keyboard);
      } else {
        // –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const defaultMessage =
          "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /help";

        await sendMessage(chatId, defaultMessage);
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ webhook:", error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    );
  }
}

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
export async function GET() {
  try {
    if (!TELEGRAM_BOT_TOKEN) {
      return NextResponse.json(
        { error: "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" },
        { status: 500 }
      );
    }

    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`;
    const response = await fetch(url);
    const botInfo = await response.json();

    return NextResponse.json({
      status: "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",
      bot: botInfo.result,
      webhookUrl: `${process.env.NEXT_PUBLIC_APP_URL}/api/telegram/webhook`,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    );
  }
}
