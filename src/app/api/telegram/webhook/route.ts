import { NextRequest, NextResponse } from "next/server";
import { initializeBot, getBotInstance } from "@/bot/bot";
import { BOT_CONFIG, BOT_MESSAGES } from "@/bot/config";
import { db } from "@/lib/db";
import { telegramUsers, artOrders } from "@/lib/db/schema";
import { eq } from "drizzle-orm";

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!TELEGRAM_BOT_TOKEN) {
  throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
let botInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    }),
  });
  return response.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function saveUserForNotifications(
  telegramId?: number,
  username?: string,
  firstName?: string,
  lastName?: string
) {
  if (!telegramId) return;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.telegramId, telegramId.toString()))
      .limit(1);

    if (existingUser.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.insert(telegramUsers).values({
        telegramId: telegramId.toString(),
        username: username || null,
        firstName: firstName || null,
        lastName: lastName || null,
      });
      console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramId} (@${username})`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db
        .update(telegramUsers)
        .set({
          username: username || null,
          firstName: firstName || null,
          lastName: lastName || null,
          updatedAt: new Date(),
        })
        .where(eq(telegramUsers.telegramId, telegramId.toString()));
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramId} (@${username})`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
export async function POST(request: NextRequest) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏
    if (!botInitialized && TELEGRAM_BOT_TOKEN) {
      initializeBot(TELEGRAM_BOT_TOKEN);
      botInitialized = true;
    }

    const body = await request.json();

    console.log("Telegram webhook:", JSON.stringify(body, null, 2));

    if (body.message) {
      const message = body.message;
      const chatId = message.chat.id;
      const text = message.text;
      const user = message.from;

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(
        `User ID: ${user?.id}, Username: ${user?.username}, Chat ID: ${chatId}, Message: ${text}`
      ); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
      if (text === "/start") {
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üé® –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                web_app: {
                  url:
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://your-project.vercel.app",
                },
              },
            ],
            [
              {
                text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                web_app: {
                  url: `${
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://your-project.vercel.app"
                  }/order`,
                },
              },
            ],
            [
              {
                text: "‚ùì –ü–æ–º–æ—â—å",
                callback_data: "help",
              },
              {
                text: "üí∞ –¶–µ–Ω—ã",
                callback_data: "pricing",
              },
            ],
            [
              {
                text: "üìä –°—Ç–∞—Ç—É—Å—ã",
                callback_data: "status",
              },
              {
                text: "‚ÑπÔ∏è –û –±–æ—Ç–µ",
                callback_data: "info",
              },
            ],
          ],
        };

        await sendMessage(chatId, BOT_MESSAGES.WELCOME, keyboard);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await saveUserForNotifications(
          user?.id,
          user?.username,
          user?.first_name,
          user?.last_name
        );
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /link –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º
      else if (text.startsWith("/link ")) {
        const orderNumber = text.replace("/link ", "").trim();

        if (!orderNumber) {
          await sendMessage(
            chatId,
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.\n–ü—Ä–∏–º–µ—Ä: /link W-001"
          );
          return NextResponse.json({ ok: true });
        }

        try {
          // –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const orders = await db
            .select()
            .from(artOrders)
            .where(eq(artOrders.orderNumber, orderNumber))
            .limit(1);

          if (orders.length === 0) {
            await sendMessage(
              chatId,
              `‚ùå –ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º ${orderNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
            );
            return NextResponse.json({ ok: true });
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await db
            .update(artOrders)
            .set({
              telegramUserId: user?.id.toString(),
              telegramUsername: user?.username || null,
            })
            .where(eq(artOrders.orderNumber, orderNumber));
          await sendMessage(
            chatId,
            `‚úÖ –ó–∞–∫–∞–∑ ${orderNumber} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.`
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const bot = getBotInstance();
          if (bot) {
            await bot.notifyOrderCreated(user?.id.toString(), {
              orderNumber,
              serviceName: "–ó–∞–∫–∞–∑ WEINERT",
              price: orders[0].desiredPrice,
              deadline: orders[0].deadline,
            });
          }

          console.log(
            `–ó–∞–∫–∞–∑ ${orderNumber} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user?.id} (@${user?.username})`
          );
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∑–∞–∫–∞–∑–∞:", error);
          await sendMessage(
            chatId,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          );
        }
      } // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
      else if (text === "/admin") {
        const userId = user?.id;

        if (!userId) {
          await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
          return NextResponse.json({ ok: true });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminIdsStr = process.env.ADMIN_TELEGRAM_IDS || "1109961645";
        const ADMIN_IDS = adminIdsStr
          .split(",")
          .map((id) => parseInt(id.trim()));
        const isAdmin = ADMIN_IDS.includes(userId);

        if (!isAdmin) {
          await sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏");
          return NextResponse.json({ ok: true });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
        const adminKeyboard = {
          inline_keyboard: [
            [
              {
                text: "üîß –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É",
                web_app: {
                  url: `${
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://weinert-bot.vercel.app"
                  }/admin`,
                },
              },
            ],
          ],
        };

        await sendMessage(
          chatId,
          "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.",
          adminKeyboard
        );
      } // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
      else if (text === "/help") {
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üîó –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∑–∞–∫–∞–∑",
                callback_data: "link_help",
              },
            ],
            [
              {
                text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                web_app: {
                  url: `${
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://weinert-bot.vercel.app"
                  }/order`,
                },
              },
            ],
            [
              {
                text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "start",
              },
            ],
          ],
        };

        await sendMessage(chatId, BOT_MESSAGES.HELP, keyboard);
      }
      // –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
      else if (text === "/info") {
        await sendMessage(chatId, BOT_MESSAGES.BOT_INFO);
      } else if (text === "/pricing") {
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                web_app: {
                  url: `${
                    process.env.NEXT_PUBLIC_APP_URL ||
                    "https://weinert-bot.vercel.app"
                  }/order`,
                },
              },
            ],
          ],
        };
        await sendMessage(chatId, BOT_MESSAGES.PRICING_INFO, keyboard);
      } else if (text === "/status") {
        await sendMessage(chatId, BOT_MESSAGES.ORDER_STATUS_INFO);
      } else if (text.startsWith("/link_help")) {
        await sendMessage(chatId, BOT_MESSAGES.LINK_INSTRUCTIONS);
      } else {
        // –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "start",
              },
              {
                text: "‚ùì –ü–æ–º–æ—â—å",
                callback_data: "help",
              },
            ],
          ],
        };
        await sendMessage(chatId, BOT_MESSAGES.UNKNOWN_COMMAND, keyboard);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
    if (body.callback_query) {
      const callbackQuery = body.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      const user = callbackQuery.from;

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
      const answerUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`;
      await fetch(answerUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ callback_query_id: callbackQuery.id }),
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ
      switch (data) {
        case "help":
          const helpKeyboard = {
            inline_keyboard: [
              [
                {
                  text: "üîó –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∑–∞–∫–∞–∑",
                  callback_data: "link_help",
                },
              ],
              [
                {
                  text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                  web_app: {
                    url: `${
                      process.env.NEXT_PUBLIC_APP_URL ||
                      "https://weinert-bot.vercel.app"
                    }/order`,
                  },
                },
              ],
              [
                {
                  text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "start",
                },
              ],
            ],
          };
          await sendMessage(chatId, BOT_MESSAGES.HELP, helpKeyboard);
          break;

        case "pricing":
          const pricingKeyboard = {
            inline_keyboard: [
              [
                {
                  text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                  web_app: {
                    url: `${
                      process.env.NEXT_PUBLIC_APP_URL ||
                      "https://weinert-bot.vercel.app"
                    }/order`,
                  },
                },
              ],
              [
                {
                  text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "start",
                },
              ],
            ],
          };
          await sendMessage(chatId, BOT_MESSAGES.PRICING_INFO, pricingKeyboard);
          break;

        case "status":
          const statusKeyboard = {
            inline_keyboard: [
              [
                {
                  text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "start",
                },
              ],
            ],
          };
          await sendMessage(
            chatId,
            BOT_MESSAGES.ORDER_STATUS_INFO,
            statusKeyboard
          );
          break;

        case "info":
          const infoKeyboard = {
            inline_keyboard: [
              [
                {
                  text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "start",
                },
                {
                  text: "‚ùì –ü–æ–º–æ—â—å",
                  callback_data: "help",
                },
              ],
            ],
          };
          await sendMessage(chatId, BOT_MESSAGES.BOT_INFO, infoKeyboard);
          break;

        case "link_help":
          const linkKeyboard = {
            inline_keyboard: [
              [
                {
                  text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                  web_app: {
                    url: `${
                      process.env.NEXT_PUBLIC_APP_URL ||
                      "https://weinert-bot.vercel.app"
                    }/order`,
                  },
                },
              ],
              [
                {
                  text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "start",
                },
              ],
            ],
          };
          await sendMessage(
            chatId,
            BOT_MESSAGES.LINK_INSTRUCTIONS,
            linkKeyboard
          );
          break;

        case "start":
          const startKeyboard = {
            inline_keyboard: [
              [
                {
                  text: "üé® –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                  web_app: {
                    url:
                      process.env.NEXT_PUBLIC_APP_URL ||
                      "https://your-project.vercel.app",
                  },
                },
              ],
              [
                {
                  text: "üìù –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç",
                  web_app: {
                    url: `${
                      process.env.NEXT_PUBLIC_APP_URL ||
                      "https://your-project.vercel.app"
                    }/order`,
                  },
                },
              ],
              [
                {
                  text: "‚ùì –ü–æ–º–æ—â—å",
                  callback_data: "help",
                },
                {
                  text: "üí∞ –¶–µ–Ω—ã",
                  callback_data: "pricing",
                },
              ],
              [
                {
                  text: "üìä –°—Ç–∞—Ç—É—Å—ã",
                  callback_data: "status",
                },
                {
                  text: "‚ÑπÔ∏è –û –±–æ—Ç–µ",
                  callback_data: "info",
                },
              ],
            ],
          };
          await sendMessage(chatId, BOT_MESSAGES.WELCOME, startKeyboard);
          break;

        default:
          await sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ webhook:", error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    );
  }
}

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
export async function GET() {
  try {
    if (!TELEGRAM_BOT_TOKEN) {
      return NextResponse.json(
        { error: "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" },
        { status: 500 }
      );
    }

    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`;
    const response = await fetch(url);
    const botInfo = await response.json();

    return NextResponse.json({
      status: "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",
      bot: botInfo.result,
      webhookUrl: `${process.env.NEXT_PUBLIC_APP_URL}/api/telegram/webhook`,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    );
  }
}
