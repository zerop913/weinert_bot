import { BOT_CONFIG, BOT_MESSAGES, isAdmin, logAdminAction } from "./config";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
const isServer = typeof window === "undefined";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramBot —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
let TelegramBot: any = null;
if (isServer) {
  TelegramBot = require("node-telegram-bot-api");
}

export class WeinertBot {
  private bot: any;
  private userLastMessages = new Map<number, number>(); // chatId -> messageId

  constructor(token: string) {
    if (!isServer || !TelegramBot) {
      throw new Error("WeinertBot can only be initialized on the server");
    }

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º polling –∏ webhook –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    // Webhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ API route
    const isProduction = process.env.NODE_ENV === "production";
    this.bot = new TelegramBot(token, {
      polling: !isProduction, // polling —Ç–æ–ª—å–∫–æ –≤ development
      webHook: false, // –æ—Ç–∫–ª—é—á–∞–µ–º webhook, –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    });

    if (!isProduction) {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å polling
      this.setupHandlers();
      console.log("ü§ñ Telegram bot started with polling (development mode)");
    } else {
      console.log(
        "ü§ñ Telegram bot initialized for message sending (production mode)"
      );
    }
  }
  private setupHandlers(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /admin
    this.bot.onText(/\/admin/, async (msg: any) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      if (!userId || !isAdmin(userId)) {
        await this.sendOrEditMessage(chatId, BOT_MESSAGES.UNAUTHORIZED);
        return;
      }

      logAdminAction(userId, "ACCESS_ADMIN_PANEL", { chatId });

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "üîß –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É",
              web_app: { url: `${BOT_CONFIG.WEB_APP_URL}/admin` },
            },
          ],
        ],
      };

      await this.sendOrEditMessage(chatId, BOT_MESSAGES.ADMIN_WELCOME, {
        reply_markup: keyboard,
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on("polling_error", (error: any) => {
      console.error("Polling error:", error);
    });
  }
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
   */
  async notifyOrderCreated(
    telegramUserId: string,
    orderData: {
      orderNumber: string;
      serviceName: string;
      price: string;
      deadline: string;
    }
  ): Promise<void> {
    try {
      const chatId = parseInt(telegramUserId);
      const message = `${BOT_MESSAGES.ORDER_CREATED_CLIENT}

üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
‚Ä¢ –ù–æ–º–µ—Ä: ${orderData.orderNumber}
‚Ä¢ –£—Å–ª—É–≥–∞: ${orderData.serviceName}
‚Ä¢ –¶–µ–Ω–∞: ${orderData.price}
‚Ä¢ –î–µ–¥–ª–∞–π–Ω: ${orderData.deadline}

‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`;

      await this.sendOrEditMessage(chatId, message);
    } catch (error) {
      console.error("Error sending order created notification:", error);
    }
  }
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
   */
  async notifyOrderCancelled(
    telegramUserId: string,
    orderNumber: string,
    adminComment?: string
  ): Promise<void> {
    try {
      const chatId = parseInt(telegramUserId);
      let message = BOT_MESSAGES.ORDER_CANCELLED_CLIENT.replace(
        "{orderNumber}",
        orderNumber
      );

      if (adminComment) {
        message += `\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n${adminComment}`;
      }

      await this.sendOrEditMessage(chatId, message);
    } catch (error) {
      console.error("Error sending order cancelled notification:", error);
    }
  }
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
   */
  async notifyAdminsNewOrder(orderData: {
    orderNumber: string;
    clientName: string;
    idea: string;
    price: string;
    deadline: string;
    telegramUserId?: string;
    telegramUsername?: string;
  }): Promise<void> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      let userInfo = `üë§ –ö–ª–∏–µ–Ω—Ç: ${orderData.clientName}`;

      if (orderData.telegramUsername) {
        userInfo += ` (@${orderData.telegramUsername})`;
      } else if (orderData.telegramUserId) {
        userInfo += ` (ID: ${orderData.telegramUserId})`;
      }
      const message = `${BOT_MESSAGES.NEW_ORDER_ADMIN}

${userInfo}
üí° –ò–¥–µ—è: ${orderData.idea.substring(0, 100)}${
        orderData.idea.length > 100 ? "..." : ""
      }
üí∞ –¶–µ–Ω–∞: ${orderData.price}
üìÖ –î–µ–¥–ª–∞–π–Ω: ${orderData.deadline}
üî¢ –ù–æ–º–µ—Ä: ${orderData.orderNumber}`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "üîß –û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ",
              web_app: { url: `${BOT_CONFIG.WEB_APP_URL}/admin` },
            },
          ],
        ],
      }; // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
      for (const adminId of BOT_CONFIG.ADMIN_IDS) {
        await this.sendOrEditMessage(adminId, message, {
          reply_markup: keyboard,
        });
      }
    } catch (error) {
      console.error("Error sending new order notification to admins:", error);
    }
  }
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
   */
  async sendMessage(
    chatId: number,
    message: string,
    options?: any
  ): Promise<any> {
    try {
      const result = await this.bot.sendMessage(chatId, message, options);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (result && result.message_id) {
        this.userLastMessages.set(chatId, result.message_id);
      }

      return result;
    } catch (error) {
      console.error("Error sending message:", error);
      return null;
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
   */
  async editMessage(
    chatId: number,
    messageId: number,
    message: string,
    options?: any
  ): Promise<any> {
    try {
      return await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    } catch (error) {
      console.error("Error editing message:", error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
   */
  async sendOrEditMessage(
    chatId: number,
    message: string,
    options?: any
  ): Promise<any> {
    const lastMessageId = this.userLastMessages.get(chatId);

    if (lastMessageId) {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const editResult = await this.editMessage(
        chatId,
        lastMessageId,
        message,
        options
      );
      if (editResult) {
        return editResult;
      }
      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log(
        `Failed to edit message ${lastMessageId} for chat ${chatId}, sending new message`
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return await this.sendMessage(chatId, message, options);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  async notifyOrderStatusUpdated(
    telegramUserId: string,
    orderNumber: string,
    status: string
  ): Promise<void> {
    try {
      const chatId = parseInt(telegramUserId);
      const message = BOT_MESSAGES.ORDER_STATUS_UPDATED.replace(
        "{orderNumber}",
        orderNumber
      ).replace("{status}", status);

      await this.sendOrEditMessage(chatId, message);
    } catch (error) {
      console.error("Error sending order status update notification:", error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
   */
  async notifyOrderInProgress(
    telegramUserId: string,
    orderNumber: string
  ): Promise<void> {
    try {
      const chatId = parseInt(telegramUserId);
      const message = BOT_MESSAGES.ORDER_IN_PROGRESS.replace(
        "{orderNumber}",
        orderNumber
      );

      await this.sendOrEditMessage(chatId, message);
    } catch (error) {
      console.error("Error sending order in progress notification:", error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
   */
  async notifyOrderCompleted(
    telegramUserId: string,
    orderNumber: string
  ): Promise<void> {
    try {
      const chatId = parseInt(telegramUserId);
      const message = BOT_MESSAGES.ORDER_COMPLETED.replace(
        "{orderNumber}",
        orderNumber
      );

      await this.sendOrEditMessage(chatId, message);
    } catch (error) {
      console.error("Error sending order completed notification:", error);
    }
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
let botInstance: WeinertBot | null = null;

export function getBotInstance(): WeinertBot | null {
  return botInstance;
}

export function initializeBot(token: string): WeinertBot {
  if (!botInstance) {
    botInstance = new WeinertBot(token);
  }
  return botInstance;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ development —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
if (
  isServer &&
  process.env.NODE_ENV === "development" &&
  process.env.TELEGRAM_BOT_TOKEN
) {
  try {
    initializeBot(process.env.TELEGRAM_BOT_TOKEN);
    console.log("üöÄ Bot auto-initialized for development");
  } catch (error) {
    console.error("‚ùå Failed to auto-initialize bot:", error);
  }
}
